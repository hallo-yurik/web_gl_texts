import {createTextTexture} from "../utils";
import {mat4, vec3, vec4} from "gl-matrix";

class Plane {
    constructor(gl, position = [0, 0, 0], rotation = [0, 0, 0]) {
        this.gl = gl;
        this.position = position;
        this.rotation = rotation; // [x, y, z]

        this.vertices = new Float32Array([
            // x, y, z,   u, v
            -1, -1, 0,   0, 0,
            1, -1, 0,   1, 0,
            -1,  1, 0,   0, 1,

            1, -1, 0,   1, 0,
            1,  1, 0,   1, 1,
            -1,  1, 0,   0, 1
        ]);

        this.texture = createTextTexture(gl, `
        Lorem ipsum dolor sit amet,
        consectetur adipiscing elit,
        sed do eiusmod tempor incididunt ut
        labore et dolore magna aliqua. Ut enim ad minim veniam,
        quis nostrud exercitation ullamco
        `);

        this.buffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer);
        gl.bufferData(gl.ARRAY_BUFFER, this.vertices, gl.STATIC_DRAW);
    }

    draw(program) {
        const gl = this.gl;
        const stride = 5 * Float32Array.BYTES_PER_ELEMENT;

        gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer);

        const positionLoc = gl.getAttribLocation(program, "position");
        gl.vertexAttribPointer(positionLoc, 3, gl.FLOAT, false, stride, 0);
        gl.enableVertexAttribArray(positionLoc);

        const uvLoc = gl.getAttribLocation(program, "uv");
        gl.vertexAttribPointer(uvLoc, 2, gl.FLOAT, false, stride, 3 * Float32Array.BYTES_PER_ELEMENT);
        gl.enableVertexAttribArray(uvLoc);

        gl.activeTexture(gl.TEXTURE0);
        gl.bindTexture(gl.TEXTURE_2D, this.texture);
        gl.uniform1i(gl.getUniformLocation(program, "uTexture"), 0);

        // üî• –î–æ–¥–∞–π —Ü–µ–π —Ä—è–¥–æ–∫ ‚Äî –º–∞–ª—é–≤–∞–Ω–Ω—è 6 –≤–µ—Ä—à–∏–Ω (2 —Ç—Ä–∏–∫—É—Ç–Ω–∏–∫–∏)
        gl.drawArrays(gl.TRIANGLES, 0, 6);
    }

    getModelMatrix() {
        const [x, y, z] = this.position;
        const [rx, ry, rz] = this.rotation;

        const sx = Math.sin(rx), cx = Math.cos(rx);
        const sy = Math.sin(ry), cy = Math.cos(ry);
        const sz = Math.sin(rz), cz = Math.cos(rz);

        // –û–±–µ—Ä—Ç–∞–Ω–Ω—è –Ω–∞–≤–∫–æ–ª–æ X, –ø–æ—Ç—ñ–º Y, –ø–æ—Ç—ñ–º Z, —Ä–∞–∑–æ–º –∑ –ø–æ–∑–∏—Ü—ñ—î—é
        // R = Rz * Ry * Rx
        const modelMatrix = new Float32Array([
            cz * cy,                 cz * sy * sx - sz * cx,   cz * sy * cx + sz * sx,   0,
            sz * cy,                 sz * sy * sx + cz * cx,   sz * sy * cx - cz * sx,   0,
            -sy,                     cy * sx,                  cy * cx,                  0,
            x,                       y,                        z,                        1,
        ]);

        return modelMatrix;
    }

    intersectRay(ray) {
        const modelMatrix = this.getModelMatrix();

        // –û—Ç—Ä–∏–º–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –ø–ª–µ–π–Ω–∞ —É —Å–≤—ñ—Ç—ñ (–æ—Å—Ç–∞–Ω–Ω—è –∫–æ–ª–æ–Ω–∫–∞ –º–∞—Ç—Ä–∏—Ü—ñ)
        const planePos = vec3.fromValues(modelMatrix[12], modelMatrix[13], modelMatrix[14]);

        // –õ–æ–∫–∞–ª—å–Ω–∞ –Ω–æ—Ä–º–∞–ª—å –ø–ª–µ–π–Ω–∞ (0, 0, 1)
        const localNormal = vec3.fromValues(0, 0, 1);

        // –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º—É—î–º–æ –Ω–æ—Ä–º–∞–ª—å –Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–º —Å–ø–æ—Å–æ–±–æ–º (–±–µ–∑ —Ç—Ä–∞–Ω—Å–ª—è—Ü—ñ—ó)
        const normalMatrix = mat4.create();
        mat4.invert(normalMatrix, modelMatrix);
        mat4.transpose(normalMatrix, normalMatrix);
        let worldNormal = vec3.create();
        vec3.transformMat4(worldNormal, localNormal, normalMatrix);
        vec3.normalize(worldNormal, worldNormal);

        const denom = vec3.dot(ray.direction, worldNormal);
        if (Math.abs(denom) < 1e-6) {
            // –ü—Ä–æ–º—ñ–Ω—å –ø–∞—Ä–∞–ª–µ–ª—å–Ω–∏–π –ø–ª–æ—â–∏–Ω—ñ
            return null;
        }

        const diff = vec3.create();
        vec3.subtract(diff, planePos, ray.origin);

        const t = vec3.dot(diff, worldNormal) / denom;

        if (t < 0) {
            // –ü–µ—Ä–µ—Ç–∏–Ω—É –Ω–µ–º–∞, –ø–ª–æ—â–∏–Ω–∞ "–ø–æ–∑–∞–¥—É" –ø—Ä–æ–º–µ–Ω—è
            return null;
        }

        // –¢–æ—á–∫–∞ –ø–µ—Ä–µ—Ç–∏–Ω—É –≤ —Å–≤—ñ—Ç–æ–≤–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
        const hitPoint = vec3.create();
        vec3.scaleAndAdd(hitPoint, ray.origin, ray.direction, t);

        // –ü–µ—Ä–µ–≤–æ–¥–∏–º–æ hitPoint —É –ª–æ–∫–∞–ª—å–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –ø–ª–æ—â–∏–Ω–∏
        const invModel = mat4.create();
        mat4.invert(invModel, modelMatrix);

        const hitPointLocal4 = vec4.fromValues(hitPoint[0], hitPoint[1], hitPoint[2], 1);
        vec4.transformMat4(hitPointLocal4, hitPointLocal4, invModel);

        const hitPointLocal = [hitPointLocal4[0], hitPointLocal4[1], hitPointLocal4[2]];

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —Ç–æ—á–∫–∞ —É –º–µ–∂–∞—Ö –∫–≤–∞–¥—Ä–∞—Ç–∞ (-1..1 –ø–æ X —ñ Y), Z –ø—Ä–∏–±–ª–∏–∑–Ω–æ 0
        if (
            hitPointLocal[0] >= -1 && hitPointLocal[0] <= 1 &&
            hitPointLocal[1] >= -1 && hitPointLocal[1] <= 1 &&
            Math.abs(hitPointLocal[2]) < 0.01
        ) {
            return {
                point: hitPoint,
                localPoint: hitPointLocal,
                distance: t
            };
        }

        return null;
    }
}

export default Plane;
